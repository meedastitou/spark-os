worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    #Allow large files to be upload for the update mechanism
    client_max_body_size 200M;

    # don't include the nginx version number in error messages
    # and the Server response header
    server_tokens off;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # log errors to syslog
        error_log syslog:server=unix:/dev/log;
        # don't log access
        access_log off;

        ssl_certificate /data/sysroot/etc/nginx/ssl/cert.pem;
        ssl_certificate_key /data/sysroot/etc/nginx/ssl/key.pem;

        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # Limit to modern devices
        # Oldest compatible clients: Firefox 27, Chrome 30, IE 11 on Windows 7, Edge, Opera 17, Safari 9, Android 5.0, and Java 8
        # See https://mozilla.github.io/server-side-tls/ssl-config-generator
        # and https://wiki.mozilla.org/Security/Server_Side_TLS
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # Enable HTTP Strict Transport Security (HSTS).  When a user visits our page once
        # using https, instruct the browser to never try http again
        # (15768000 seconds = 6 months)
        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;

        # Do not allow rending our web page within an frame
        add_header X-Frame-Options deny;

        # prevent the browser from MIME-sniffing a response away from the declared content-type
        add_header X-Content-Type-Options nosniff;

        # if an XSS attack is detected instruct the browser to prevent rendering of the page
        add_header X-XSS-Protection "1; mode=block";

        # enable gzip compression for the dynamic content
        gzip on;
        gzip_proxied any;
        gzip_types text/plain text/css application/json application/x-javascript text/javascript;
        gzip_vary on;
        gzip_min_length 256;

        # use nginx to serve static content
        location / {
          root /usr/lib/node_modules/spark-webadmin/src/public;
          gzip_static on;
        }

        location /rest/logs/files/ {
          alias /var/lib/spark/logs/;
          add_header Content-Type "application/gzip";
          add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
          add_header X-Frame-Options deny;
          add_header X-Content-Type-Options nosniff;
          add_header X-XSS-Protection "1; mode=block";
        }

        # direct the spark-webadmin rest api
        location /api/ {
            proxy_pass http://127.0.0.1:8080/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
        }

        # spark-mqtt-broker - websockets
        location /mqtt/ {
            proxy_pass http://127.0.0.1:9092/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
        }
    }
}

stream {
    server {
        # spark-mqtt-broker
        listen 1883;
        proxy_pass 127.0.0.1:9883;
    }
}
